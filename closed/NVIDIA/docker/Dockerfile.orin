# Copyright (c) 2023, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG BASE_IMAGE
FROM ${BASE_IMAGE}

SHELL ["/bin/bash", "-c"]

#ARG CUDA_VER=11.4
ARG CUDA_VER=12.2
ARG USE_NIGHTLY=1
ARG USE_NGC=0
ARG EXTERNAL_USER=0
ARG MITTEN_VER

# Set python 3.8 as default
RUN ln -sf /usr/bin/python3 /usr/bin/python
RUN ln -sf /usr/bin/pip3 /usr/bin/pip

# Install core packages
RUN apt update \
    && apt install -y --no-install-recommends build-essential autoconf libtool git \
        ccache curl wget pkg-config sudo ca-certificates automake libssl-dev \
        bc python3-dev python3-pip google-perftools gdb moreutils libglib2.0-dev clang sshfs libre2-dev \
        libboost-dev libnuma-dev numactl sysstat sshpass ntpdate less vim iputils-ping \
    && apt remove -y cmake \
    && apt remove -y libgflags-dev \
    && apt remove -y libprotobuf-dev \
    && apt -y autoremove
RUN apt install -y --no-install-recommends pkg-config zip g++ zlib1g-dev unzip rapidjson-dev rsync \
        libhdf5-dev libgoogle-glog-dev libgflags-dev

# install CUDA 11.4 (takes ~10 mins)
# If build failed at these step, most likely docker ran out of space on the file system
# use 'docker system prune' to remove dangle images/caches
# use '--all' flag will purge all
WORKDIR /tmp
#RUN if [[ ${USE_NGC} = 0 ]]; then \
#    wget -nv http://cuda-repo/release-candidates/kitpicks/cuda-r11-4-tegra/11.4.19/005/local_installers/cuda-repo-l4t-11-4-local_11.4.19-1_arm64.deb \
#    && echo "46997a866fea997479258c54ade94a4189771b4e393285e876864ae18c64c206  cuda-repo-l4t-11-4-local_11.4.19-1_arm64.deb" | sha256sum --check \
#    && dpkg -i ./cuda-repo-l4t-11-4-local_11.4.19-1_arm64.deb \
#    && rm cuda*.deb; fi
#RUN if [[ ${USE_NGC} = 0 ]]; then \
#    cp /var/cuda-repo-l4t-11-4-local/cuda-*-keyring.gpg /usr/share/keyrings/ \
#    && apt update \
#    && apt install -y cuda-toolkit-*; fi

# install cudnn 8.6 (takes ~4 mins)
#RUN if [[ ${USE_NGC} = 0 ]]; then \
#    wget -nv http://cuda-repo/release-candidates/kitpicks/cudnn-v8-6-tegra/8.6.0.174/001/local_installers/cudnn-local-tegra-repo-ubuntu2004-8.6.0.174_1.0-1_arm64.deb \
#    && echo "7f7e1fd18549d3a95b6148da64675055860e495800bac15ea35670ba692f8a41  cudnn-local-tegra-repo-ubuntu2004-8.6.0.174_1.0-1_arm64.deb" | sha256sum --check \
#    && dpkg -i ./cudnn-local-tegra-repo-ubuntu2004-8.6.0.174_1.0-1_arm64.deb \
#    && rm cudnn*.deb; fi
#RUN if [[ ${USE_NGC} = 0 ]]; then \
#    cp /var/cudnn-local-tegra-repo-ubuntu2004-8.6.0.174/cudnn-local-tegra-A4C79EB5-keyring.gpg /usr/share/keyrings/ \
#    && apt update \
#    && apt install -y libcudnn8*; fi

# install TRT 8.5.2 (takes ~8 mins)
ARG TRT_DEB_URL=http://cuda-repo/release-candidates/Libraries/TensorRT/v8.5/8.5.2.2-aa56a885/11.4-r470/l4t-aarch64/deb/
ARG TRT_MAJOR_VER=8
ARG TRT_MINOR_VER=5
ARG TRT_PATCH_VER=2
ARG TRT_QA_VER=2
ARG TRT_VER=${TRT_MAJOR_VER}.${TRT_MINOR_VER}.${TRT_PATCH_VER}
#RUN if [[ ${USE_NGC} = 0 ]]; then \
#    install_deb_pkg() { wget -nv $TRT_DEB_URL/$1 -O $1 && dpkg -i $1 && rm $1; } \
#    && install_deb_pkg libnvinfer${TRT_MAJOR_VER}_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvinfer-dev_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvinfer-plugin${TRT_MAJOR_VER}_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvinfer-plugin-dev_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvparsers${TRT_MAJOR_VER}_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvparsers-dev_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvonnxparsers${TRT_MAJOR_VER}_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvonnxparsers-dev_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg python3-libnvinfer_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg python3-libnvinfer-dev_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg graphsurgeon-tf_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg uff-converter-tf_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && install_deb_pkg libnvinfer-bin_${TRT_VER}-1+cuda${CUDA_VER}_arm64.deb \
#    && unset -f install_deb_pkg; fi

# matplotlib dependencies for tegrastats
RUN apt install -y libfreetype6-dev libpng-dev  \
    && apt install -y libatlas3-base libopenblas-base \
    && apt install -y git-lfs && git-lfs install

# Setup environment variables for pycuda
ENV CUDA_ROOT=/usr/local/cuda
ENV CUDA_INC_DIR=${CUDA_ROOT}/include
ENV PATH=${CUDA_ROOT}/bin:/usr/bin:${PATH}
ENV CPATH=${CUDA_ROOT}/include:${CPATH}
ENV LIBRARY_PATH=${CUDA_ROOT}/lib64:${LIBRARY_PATH}
ENV LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}

# Setup python basic dependencies (takes ~5 min)
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install --upgrade setuptools wheel virtualenv \
    && python3 -m pip install Cython==0.29.23 \
    && python3 -m pip install numpy==1.22.4 \
    # && python3 -m pip uninstall -y pycuda && python3 -m pip install pycuda==2021.1 \
    && python3 -m pip uninstall -y pycuda && python3 -m pip install pycuda==2023.1 \
    && rm -rf /usr/lib/python3/dist-packages/yaml /usr/lib/python3/dist-packages/PyYAML*

# scikit-learn will complain about missing scipy non-determistically when specified in requirements.txt, since they for
# some reason put scipy under 'extra_requires' instead of 'install_requires': https://stackoverflow.com/a/33953462
# Workaround by manually installing prior to requirements.txt.
RUN python3 -m pip install scipy==1.7.3

# Work around for conditional copy
COPY requirements.orin.txt nvmitten-${MITTEN_VER}-cp38-cp38-linux_aarch64.whl* /tmp
# NGC Image stores packages in /opt/
#RUN if [[ ${USE_NGC} = 1 ]]; then \
    #mv /opt/nvmitten-${MITTEN_VER}-cp38-cp38-linux_aarch64.whl /tmp; fi
WORKDIR /tmp

# Install required dependencies (takes ~5 min)
RUN python3 -m pip install --no-cache -r requirements.orin.txt

# Install internally prebuilt dependencies
RUN if [ $EXTERNAL_USER = 0 ]; then \
    git clone -b rel-3.1 https://gitlab-master.nvidia.com/yihengz/mlperf-internal-wheels.git --depth 1 \
    && python3 -m pip install mlperf-internal-wheels/orin/* \
    && rm -rf mlperf-internal-wheels; fi

# Install cub, needed by plugins
RUN rm -rf cub-1.8.0.zip cub-1.8.0 /usr/include/aarch64-linux-gnu/cub \
    && wget -nv https://github.com/NVlabs/cub/archive/1.8.0.zip -O cub-1.8.0.zip \
    && unzip cub-1.8.0.zip \
    && mv cub-1.8.0/cub /usr/include/aarch64-linux-gnu/ \
    && rm -rf cub-1.8.0.zip cub-1.8.0

# Install ONNX graph surgeon, prebuilt wheel not yet available for jetson
WORKDIR /tmp
RUN apt install -y libprotobuf-dev \
    && rm -rf TensorRT \
    && git clone https://github.com/NVIDIA/TensorRT.git \
    && pushd TensorRT \
    && git checkout release/8.0 \
    && cd tools/onnx-graphsurgeon \
    && make build \
    && python3 -m pip install --no-deps -t /usr/local/lib/python3.10/dist-packages --force-reinstall dist/*.whl \
    && popd \
    && rm -rf TensorRT

# For public users, build prebuilt dependencies from source
# DALI v1.19
# building from scratch takes ~45 minutes
#COPY dali_orin.patch /tmp
#RUN if [ $EXTERNAL_USER != 0 ]; then \
#    rm -rf protobuf-cpp-3.11.1.tar.gz \
#    && apt-get install -y libjpeg-dev libtiff-dev libopencv-dev \
#    && ln -s /usr/lib/aarch64-linux-gnu/libclang-10.so.1 /usr/lib/aarch64-linux-gnu/libclang.so \
#    && git config --global user.email "abc@abc.com" \
#    && git config --global user.name "abc" \
#    && wget https://github.com/protocolbuffers/protobuf/releases/download/v3.11.1/protobuf-cpp-3.11.1.tar.gz \
#    && tar -xzf protobuf-cpp-3.11.1.tar.gz \
#    && rm protobuf-cpp-3.11.1.tar.gz \
#    && cd protobuf-3.11.1 \
#    && ./configure CXXFLAGS="-fPIC" --prefix=/usr/local --disable-shared \
#    && make -j$(nproc) \
#    && make install \
#    && ldconfig \
#    && cd /tmp \
#    && rm -rf protobuf-3.11.1 \
#    && cd /usr/local \
#    && rm -rf DALI \
#    && git clone -b release_v1.19 --recursive https://github.com/NVIDIA/DALI \
#    && cd DALI \
#    && git apply /tmp/dali_orin.patch \
#    && mkdir build \
#    && cd build \
#    && cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CUDA_COMPILER=/usr/local/cuda/bin/nvcc -DCUDA_TARGET_ARCHS="87" \
#       -DBUILD_PYTHON=ON -DBUILD_TEST=OFF -DBUILD_BENCHMARK=OFF -DBUILD_NVTX=OFF -DBUILD_LMDB=OFF -DBUILD_LIBTIFF=OFF -DBUILD_LIBSND=OFF -DBUILD_CUFILE=OFF \
#       -DBUILD_LIBSND=OFF -DBUILD_LIBTAR=OFF -DBUILD_FFTS=ON -DBUILD_NVOF=OFF -DBUILD_NVDEC=OFF -DBUILD_NVJPEG=OFF -DBUILD_NVJPEG2K=OFF -DBUILD_NVML=OFF\
#       -DVERBOSE_LOGS=OFF -DWERROR=OFF -DBUILD_WITH_ASAN=OFF -DBUILD_JPEG_TURBO=ON -DProtobuf_PROTOC_EXECUTABLE=/usr/local/bin/protoc .. \
#    && make -j$(nproc) \
#    && make install \
#    && python3 -m pip install dali/python/ \
#    && mv /usr/local/DALI/build/dali/python/nvidia/dali /tmp/dali \
#    && rm -rf /usr/local/DALI \
#    && mkdir -p /usr/local/DALI/build/dali/python/nvidia/ \
#    && mv /tmp/dali /usr/local/DALI/build/dali/python/nvidia/; fi

# Needed for Mitten
RUN python3 -m pip uninstall -y pic-c

# Install Mitten
WORKDIR /tmp
RUN git clone https://github.com/NVIDIA/mitten.git \
    && cd mitten \
    && python3 -m pip install .
#WORKDIR /tmp
#RUN python3 -m pip install /tmp/nvmitten-${MITTEN_VER}-cp38-cp38-linux_aarch64.whl

#RUN wget -nv https://developer.nvidia.com/downloads/embedded/l4t/cupva-algos-gen2-2.0.0-cupva_algo_dlops.deb \
#    && dpkg --add-architecture amd64 \
#    && dpkg -i cupva-algos-gen2-2.0.0-cupva_algo_dlops.deb

ENV LD_LIBRARY_PATH=${CUDA_ROOT}/lib64:${LD_LIBRARY_PATH}
WORKDIR /work
